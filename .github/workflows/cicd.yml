name: React App CI/CD Pipeline

on:
  push:
    branches:
      - feature/**  # Run on any feature branch push
  pull_request:
    types:
      - closed
    branches:
      - develop

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Load environment variables
        run:  source /etc/self-hosted-runner/.env

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install

      - name: Build the React app
        run: npm run build

  review:
    needs: build
    runs-on: self-hosted
    if: github.event_name == 'pull_request'
    steps:
      - name: Require at least one review
        run: echo "Waiting for review approval..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  deploy:
    runs-on: self-hosted
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH for EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        run: |
          # Create private key file for SSH
          echo "${SSH_PRIVATE_KEY}" > private_key.pem
          chmod 400 private_key.pem

      - name: Deploy to EC2 Server
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          REMOTE_WORK_DIR: /home/ubuntu/movix-react
          DEPLOY_DIR: /var/www/vhosts/frontend/
        run: |
          # Connect to EC2 instance and run deployment steps
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${EC2_USER}@${EC2_HOST} << 'EOF'
            # Navigate to the specified directory
            cd ${REMOTE_WORK_DIR}

            # Pull the latest code from the repository
            git pull origin develop 

            # Install dependencies and build the project
            npm install
            npm run build

            # Copy the built 'dist' folder to the deployment directory
            sudo cp -r dist ${DEPLOY_DIR}/
          EOF
